TITLE:: FuncChain2
summary:: A named list of functions, can be dis/enabled.
categories:: Collections, Function, Modality
related:: Classes/FuncChain, Classes/MKtl, Overviews/Modality

DESCRIPTION::
Like FuncChain, FuncChain2 is an ordered list of functions that can be accessed, added, removed and reordered by name.

FuncChain2 also has ways to enable and disable functions in the list by name,
and can trace evaluations for debugging.
When .value is called, all functions in the list that have true flags will be called in the specified order.

Function
code::
(
a = FuncChain2([
    \ada, { |x| x },
    \bob, { |x| x[1] }
]);
)

// disable, enable
a.value("funchain");
a.disable(\bob)
a.value("funchain");
a.enable(\bob).disable(\ada)
a.value("funchain");
a.enable(a.names); // enable all
a.value("funchain");

// trace or not:
a.tracing;
a.trace;

a.value("test");
a.trace(false);
a.trace;

::
CLASSMETHODS::

METHOD:: new
make a new FuncChain2 from name/value pairs

INSTANCEMETHODS::

METHOD:: flags
an array of flags that determines whether each functions will be evaluated or not.

METHOD:: trace
set whether FuncChain2 should be tracing evaluations or not.
METHOD:: tracing
ask whether tracing is on
returns:: a boolean


METHOD:: addFirst, addLast, addBefore, addAfter
add a function at a specific place in the chain.
as in FuncChain, except optional flag argument added.

ARGUMENT:: name
name for the function

ARGUMENT:: func
the function to add

ARGUMENT:: otherName
the name of the function realtive to which the new one is added

ARGUMENT:: flag
flag whetehr the function will be enabled or not.

METHOD:: add, addFunc, put, replaceAt, value
as in FuncChain, but with optional flag argument added.

METHOD:: putAtIndex, insertAtIndex, removeAtIndex
same as in FuncChain, but flag argument added.

METHOD:: enable, disable
enable a function or set of functions
ARGUMENT:: which
name/names of the function/functions to enable/disable

METHOD:: isEnabled
ask whether a function is enabled
returns:: a boolean

