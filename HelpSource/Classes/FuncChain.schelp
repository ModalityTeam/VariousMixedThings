CLASS:: FuncChain
summary:: a named function list
categories:: Collections, Function, Modality
related:: Classes/MKtl, Reference/Modality

DESCRIPTION::
FuncChain is an ordered list of functions that can be accessed, added, removed and reordered by name:

list::
## Adding with a new name adds to the end of the list.
## Adding with an existing name replaces the func at that name.
## One can add before or after an existing name.
## One can add at the head of the list.
::

FuncChain is fully compatible with FunctionList, and also supports anonymous addFunc/removeFunc.

When the method valueArray is called, all functions in the list will be called in the order specified.

code::
// make a FuncChain:
(
a = FuncChain([
	\ada, { |x| x },
	\bob, { |x| x[1] }
]);
)
a.value("funchain").postcs;


// add by name, by default to the end
a.put(\x, { |x| x.reverse });
a.value("func");
a.at(\x).postcs;
a.add(\bob, {|x| x.keep(3) }); // replace at name
a.value("func");


// use with anonymous functions, like FunctionList:
f = {|x| x.scramble.keep(3) }; // remember the func ...
f.postcs;
a.addFunc(f);
f.value("quick");
a.value("quick");
a.removeFunc(f);  // so we can remove it here


// add relative to existing names
a.addLast(\x, {3});
a.addFirst(\y, {3});
a.addBefore(\ci, {6}, \y);
a.addAfter(\dodo, {x}, \ci);


// move funcs around within FuncChain
a.moveLast(\ada);
a.moveBefore(\ada, \x);
a.moveFirst(\bob);
a.moveAfter(\bob, \y);
::

CLASSMETHODS::

METHOD:: new
Create a new FuncChain.
argument:: pairs
list with key - function pairs to populate the FuncChain with.
returns:: a new FuncChain.


INSTANCEMETHODS::

PRIVATE:: storeArgs, printOn, init


METHOD:: names
The names of the different functions.


METHOD:: put
Put a function in the chain.
If the name is already present, replace the function with the new one.
If the name is not yet present, place the function at the end of the chain.
argument:: name
The name for the function.

argument:: func
The function.


METHOD:: at
Get the function that's in the chain at the given name
argument:: name
The name of the function.


METHOD:: add
Generalized interface to add a function to the FuncChain.
If the addAction is not given, it behaves like link::#-put::.
Otherwise it calls the method defined by addAction.
argument:: name
The name for the function.
argument:: func
The function to add
argument:: addAction
Way of adding the function (addAfter, addBefore, addFirst, addLast, replaceAt)

argument:: otherName
The name of the function relative to which the function needs to be placed (only for addActions: addAfter, addBefore, replaceAt).


METHOD:: removeAt
remove function at name


METHOD:: addFunc
add a function anonymously. dummy name used will be nil.

METHOD:: removeFunc
remove a function anonymously.


METHOD:: addFirst
Add the function to the beginning of the list. If a function with that name was already in the chain, replace it, and put it at the beginning of the list.
argument:: name
The name of the function.
argument:: func
The function to add

METHOD:: addLast
Add the function to the end of the list. If a function with that name was already in the chain, replace it, and put it at the end of the list.
argument:: name
The name of the function.
argument:: func
The function to add


METHOD:: addBefore
Add the function to the list before the function with the other name.
If a function with that name was already in the chain, If a function with that name was already in the chain, replace it, and put it before the other function.
If the otherName is not present, the function is placed at the beginning of the list (and you are given a warning).
argument:: name
The name of the function.
argument:: func
The function to add
argument:: otherName
The name of the function before which the function is to be placed.


METHOD:: addAfter
Add the function to the list after the function with the otherName.
If a function was already there with that name, replace the function, and put it after the other function.
If the other function is not present, the function is placed at the end of the list (and you are given a warning).

argument:: name
The name of the function.

argument:: func
The function to add

argument:: otherName
The name of the function after which the function is to be placed.


METHOD:: replaceAt
Replace the function with the other name with the function passed in, with the name.

If a function was already there with that name, remove that function, and replace the function at the given place.

If the other function is not present, the function is placed at the end of the list (and you are given a warning).


argument:: name
The name of the function.

argument:: func
The function to add

argument:: otherName
The name of the function after which the function needs to be placed.
(describe method here)


METHOD:: moveFirst
Move the function at that name to the beginning of the list.
If name is not present, you are given a warning.
argument:: name
The name of the function.

METHOD:: moveLast
Move the function at that name to the end of the list.
If name is not present, you are given a warning.
argument:: name
The name of the function.


METHOD:: moveBefore
Move the function at that name before the function with the other name.
If name or otherName are not present, you are given a warning.
argument:: name
The name of the function.
argument:: otherName
The name of the function before which the function is to be placed.


METHOD:: moveAfter
Move the function at that name after the function with the other name.
If name or otherName are not present, you are given a warning.
argument:: name
The name of the function.
argument:: otherName
The name of the function after which the function is to be placed.


subsection:: private methods

METHOD:: putAtIndex
Put the function at the given index.
argument:: index
integer index into the list
argument:: name
name for the function
argument:: func
the function


METHOD:: insertAtIndex
insert a method at a given index
argument:: index
integer number for the index
argument:: name
Name of the function
argument:: func
The function


METHOD:: removeAtIndex
remove the function at the index
argument:: index
integer number for the index


METHOD:: atIndex
get what's at a given index
argument:: index
integer number for the index

returns:: the function at the index


EXAMPLES::

code::
// make a FuncChain:
(
a = FuncChain([
	\ada, { |x| x },
	\bob, { |x| x[1] }
]);
)
a.value("funchain").postcs;

// put by name -> goes to the end
a.put(\x, { |x| x.reverse });
a.value("func");

// at
a.at(\x).postcs;

// add adds or replaces at name
a.add(\bob, {|x| x.keep(3) }); // replace at name
a.value("func");

// use with anonymous functions, like FunctionList:
f = {|x| x.scramble.keep(3) }; // remember the func ...
f.postcs;
a.addFunc(f);   // note name nil
a.value("quick");
a.removeFunc(f);  // so we can remove it here


a.addLast(\x, {3});
a.addFirst(\y, {3});
a.addBefore(\ci, {6}, \y);
a.addAfter(\dodo, {x}, \ci);

a.moveLast(\ada);
a.moveBefore(\ada, \x);
a.moveFirst(\bob);
a.moveAfter(\bob, \y);

a.removeAt(\x); a
a.removeAt(\y); a

a.replaceAt(\dede, { 987 }, \dodo); a
a.replaceAt(\bill, { 123 }, \bob); a

::